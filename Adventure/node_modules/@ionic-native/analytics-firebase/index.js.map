{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/analytics-firebase/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,eAAe,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8DlD,qCAAiB;;;;IAmGtD;;;;;;;;;OASG;;;;;;;;;;;IAEH,oCAAQ;;;;;;;;;;cAAC,SAAiB,EAAE,WAAoB;QAC9C,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,8CAAkB;;;;;QAChB,MAAM,CAAC;KACR;IAED;;;;OAIG;;;;;;IAEH,yDAA6B;;;;;cAAC,OAAgB;QAC5C,MAAM,CAAC;KACR;IAED;;;;;OAKG;;;;;;;IAEH,4CAAgB;;;;;;cAAC,UAAkB;QACjC,MAAM,CAAC;KACR;IAED;;;;OAIG;;;;;;IAEH,qDAAyB;;;;;cAAC,YAAoB;QAC5C,MAAM,CAAC;KACR;IAED;;;;OAIG;;;;;;IAEH,qDAAyB;;;;;cAAC,YAAoB;QAC5C,MAAM,CAAC;KACR;IAED;;;;OAIG;;;;;;IAEH,qCAAS;;;;;cAAC,MAAc;QACtB,MAAM,CAAC;KACR;IAED;;;;;OAKG;;;;;;;IAEH,2CAAe;;;;;;cAAC,gBAAwB,EAAE,iBAAyB;QACjE,MAAM,CAAC;KACR;;gBAxLF,UAAU;;;QAOR,eAAe;;;;QAwCf,eAAe;;;;QA+Df,OAAO,EAAE;;;;qDAGT;;QAMA,OAAO,EAAE;;;;+DAGT;;QAOA,OAAO,EAAE;;;;0EAGT;;QAQA,OAAO,EAAE;;;;6DAGT;;QAOA,OAAO,EAAE;;;;sEAGT;;QAOA,OAAO,EAAE;;;;sEAGT;;QAOA,OAAO,EAAE;;;;sDAGT;;QAQA,OAAO,EAAE;;;;4DAGT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAvLU,iBAAiB;QAR7B,MAAM,CAAC;YACN,UAAU,EAAE,mBAAmB;YAC/B,MAAM,EAAE,0BAA0B;YAClC,SAAS,EAAE,WAAW;YACtB,IAAI,EAAE,6CAA6C;YACnD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,iBAAiB,EAwL7B;4BAvPD;EA+DuC,iBAAiB;SAA3C,iBAAiB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, CordovaProperty, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\n/**\n * @name Analytics Firebase\n * @description\n * Google Analytics Firebase plugin for Ionic Native apps.\n *\n * @usage\n * ```typescript\n * import { AnalyticsFirebase } from '@ionic-native/analytics-firebase';\n *\n *\n * constructor(private analyticsFirebase: AnalyticsFirebase) { }\n *\n * // Track an event with default events and params\n * const eventParams = {};\n * eventParams[this.analyticsFirebase.DEFAULT_PARAMS.LEVEL] = 29;\n * this.analyticsFirebase.logEvent(this.analyticsFirebase.DEFAULT_EVENTS.LEVEL_UP, eventParams)\n *   .then(() => console.log('Event successfully tracked'))\n *   .catch(err => console.log('Error tracking event:', err));\n *\n * // Track an event with custom events and params\n * const eventParams = {};\n * eventParams['my-prop'] = 29;\n * this.analyticsFirebase.logEvent('my-event', eventParams)\n *   .then(() => console.log('Event successfully tracked'))\n *   .catch(err => console.log('Error tracking event:', err));\n *\n *\n * // Reset analytics data\n * this.analyticsFirebase.resetAnalyticsData()\n *   .then(() => console.log('Analytics data have been reset'))\n *   .catch(err => console.log('Error resetting analytics data:', err));\n *\n *\n * // Track a screen view\n * this.analyticsFirebase.setCurrentScreen('Home')\n *   .then(() => console.log('View successfully tracked'))\n *   .catch(err => console.log('Error tracking view:', err));\n *\n *\n * // Set user id\n * this.analyticsFirebase.setUserId('USER-ID')\n *   .then(() => console.log('User id successfully set'))\n *   .catch(err => console.log('Error setting user id:', err));\n *\n *\n * // Set user property from default properties\n * this.analyticsFirebase.setUserProperty('KEY', 'VALUE')\n *   .then(() => console.log('User property successfully set'))\n *   .catch(err => console.log('Error setting user property:', err));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'AnalyticsFirebase',\n  plugin: 'cordova-plugin-analytics',\n  pluginRef: 'analytics',\n  repo: 'https://github.com/appfeel/analytics-google',\n  platforms: ['Android', 'iOS']\n})\n@Injectable()\nexport class AnalyticsFirebase extends IonicNativePlugin {\n  /**\n   * This enum represents AnalyticsFirebase default events.\n   * Use one of these default events or a custom event\n   * @readonly\n   */\n  @CordovaProperty\n  readonly DEFAULT_EVENTS: {\n    ADD_PAYMENT_INFO: string;\n    ADD_TO_CART: string;\n    ADD_TO_WISHLIST: string;\n    APP_OPEN: string;\n    BEGIN_CHECKOUT: string;\n    CAMPAIGN_DETAILS: string;\n    CHECKOUT_PROGRESS: string;\n    EARN_VIRTUAL_CURRENCY: string;\n    ECOMMERCE_PURCHASE: string;\n    GENERATE_LEAD: string;\n    JOIN_GROUP: string;\n    LEVEL_END: string;\n    LEVEL_START: string;\n    LEVEL_UP: string;\n    LOGIN: string;\n    POST_SCORE: string;\n    PRESENT_OFFER: string;\n    PURCHASE_REFUND: string;\n    REMOVE_FROM_CART: string;\n    SEARCH: string;\n    SELECT_CONTENT: string;\n    SET_CHECKOUT_OPTION: string;\n    SHARE: string;\n    SIGN_UP: string;\n    SPEND_VIRTUAL_CURRENCY: string;\n    TUTORIAL_BEGIN: string;\n    TUTORIAL_COMPLETE: string;\n    UNLOCK_ACHIEVEMENT: string;\n    VIEW_ITEM: string;\n    VIEW_ITEM_LIST: string;\n    VIEW_SEARCH_RESULTS: string;\n  };\n\n  /**\n   * This enum represents AnalyticsFirebase default params.\n   * Use one of these default params or a custom param\n   * @readonly\n   */\n  @CordovaProperty\n  readonly DEFAULT_PARAMS: {\n    ACHIEVEMENT_ID: string;\n    ACLID: string;\n    AFFILIATION: string;\n    CAMPAIGN: string;\n    CHARACTER: string;\n    CHECKOUT_OPTION: string;\n    CHECKOUT_STEP: string;\n    CONTENT: string;\n    CONTENT_TYPE: string;\n    COUPON: string;\n    CP1: string;\n    CREATIVE_NAME: string;\n    CREATIVE_SLOT: string;\n    CURRENCY: string;\n    DESTINATION: string;\n    END_DATE: string;\n    FLIGHT_NUMBER: string;\n    GROUP_ID: string;\n    INDEX: string;\n    ITEM_BRAND: string;\n    ITEM_CATEGORY: string;\n    ITEM_ID: string;\n    ITEM_LIST: string;\n    ITEM_LOCATION_ID: string;\n    ITEM_NAME: string;\n    ITEM_VARIANT: string;\n    LEVEL: string;\n    LEVEL_NAME: string;\n    LOCATION: string;\n    MEDIUM: string;\n    METHOD: string;\n    NUMBER_OF_NIGHTS: string;\n    NUMBER_OF_PASSENGERS: string;\n    NUMBER_OF_ROOMS: string;\n    ORIGIN: string;\n    PRICE: string;\n    QUANTITY: string;\n    SCORE: string;\n    SEARCH_TERM: string;\n    SHIPPING: string;\n    SOURCE: string;\n    START_DATE: string;\n    SUCCESS: string;\n    TAX: string;\n    TERM: string;\n    TRANSACTION_ID: string;\n    TRAVEL_CLASS: string;\n    VALUE: string;\n    VIRTUAL_CURRENCY_NAME: string;\n  };\n\n  /**\n   * Logs an app event. The event can have up to 25 parameters.\n   * Events with the same name must have the same parameters.\n   * Up to 500 event names are supported.\n   * Using predefined [FirebaseAnalytics.Event](https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Event.html) and/or [FirebaseAnalytics.Param](https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Param.html) is recommended for optimal reporting.\n   *\n   * @param eventName {string} The event name\n   * @param eventParams {object} (Optional) The event params\n   * @return {Promise<any>} Returns a promise that resolves when the event is logged\n   */\n  @Cordova()\n  logEvent(eventName: string, eventParams?: object): Promise<any> {\n    return;\n  }\n\n  /**\n   * Clears all analytics data for this app from the device and resets the app instance id\n   * @return {Promise<any>} Returns a promise that resolves when the analytics data is cleared\n   */\n  @Cordova()\n  resetAnalyticsData(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sets whether analytics collection is enabled for this app on this device. This setting is persisted across app sessions. By default it is enabled\n   * @param screenName {boolean} The value of the collection\n   * @return {Promise<any>} Returns a promise that resolves when the collection is enabled/disabled\n   */\n  @Cordova()\n  setAnalyticsCollectionEnabled(enabled: boolean): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sets the current screen name, which specifies the current visual context in your app.\n   * This helps identify the areas in your app where users spend their time and how they interact with your app\n   * @param screenName {string} The screen name\n   * @return {Promise<any>} Returns a promise that resolves when the current screen is setted\n   */\n  @Cordova()\n  setCurrentScreen(screenName: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sets the minimum engagement time required before starting a session. The default value is 10000 (10 seconds)\n   * @param screenName {number} The duration in milliseconds\n   * @return {Promise<any>} Returns a promise that resolves when the minimum session duration is set\n   */\n  @Cordova()\n  setMinimumSessionDuration(milliseconds: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sets the duration of inactivity that terminates the current session. The default value is 1800000 (30 minutes)\n   * @param screenName {number} The duration in milliseconds\n   * @return {Promise<any>} Returns a promise that resolves when the session timeout duration is set\n   */\n  @Cordova()\n  setSessionTimeoutDuration(milliseconds: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sets the user ID property. This feature must be used in accordance with Google's Privacy Policy\n   * @param userId {string} The user id\n   * @return {Promise<any>} Returns a promise that resolves when the user id is setted\n   */\n  @Cordova()\n  setUserId(userId: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sets a user property to a given value. Up to 25 user property names are supported. Once set, user property values persist throughout the app lifecycle and across sessions\n   * @param userPropertyName {string} The user property name\n   * @param userPropertyValue {string} The user property value\n   * @return {Promise<any>} Returns a promise that resolves when the user property setted\n   */\n  @Cordova()\n  setUserProperty(userPropertyName: string, userPropertyValue: string): Promise<any> {\n    return;\n  }\n}\n"]}