var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Cordova, CordovaProperty, IonicNativePlugin, Plugin } from '@ionic-native/core';
/**
 * @name Analytics Firebase
 * @description
 * Google Analytics Firebase plugin for Ionic Native apps.
 *
 * @usage
 * ```typescript
 * import { AnalyticsFirebase } from '@ionic-native/analytics-firebase';
 *
 *
 * constructor(private analyticsFirebase: AnalyticsFirebase) { }
 *
 * // Track an event with default events and params
 * const eventParams = {};
 * eventParams[this.analyticsFirebase.DEFAULT_PARAMS.LEVEL] = 29;
 * this.analyticsFirebase.logEvent(this.analyticsFirebase.DEFAULT_EVENTS.LEVEL_UP, eventParams)
 *   .then(() => console.log('Event successfully tracked'))
 *   .catch(err => console.log('Error tracking event:', err));
 *
 * // Track an event with custom events and params
 * const eventParams = {};
 * eventParams['my-prop'] = 29;
 * this.analyticsFirebase.logEvent('my-event', eventParams)
 *   .then(() => console.log('Event successfully tracked'))
 *   .catch(err => console.log('Error tracking event:', err));
 *
 *
 * // Reset analytics data
 * this.analyticsFirebase.resetAnalyticsData()
 *   .then(() => console.log('Analytics data have been reset'))
 *   .catch(err => console.log('Error resetting analytics data:', err));
 *
 *
 * // Track a screen view
 * this.analyticsFirebase.setCurrentScreen('Home')
 *   .then(() => console.log('View successfully tracked'))
 *   .catch(err => console.log('Error tracking view:', err));
 *
 *
 * // Set user id
 * this.analyticsFirebase.setUserId('USER-ID')
 *   .then(() => console.log('User id successfully set'))
 *   .catch(err => console.log('Error setting user id:', err));
 *
 *
 * // Set user property from default properties
 * this.analyticsFirebase.setUserProperty('KEY', 'VALUE')
 *   .then(() => console.log('User property successfully set'))
 *   .catch(err => console.log('Error setting user property:', err));
 *
 * ```
 */
var AnalyticsFirebase = (function (_super) {
    __extends(AnalyticsFirebase, _super);
    function AnalyticsFirebase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Logs an app event. The event can have up to 25 parameters.
     * Events with the same name must have the same parameters.
     * Up to 500 event names are supported.
     * Using predefined [FirebaseAnalytics.Event](https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Event.html) and/or [FirebaseAnalytics.Param](https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Param.html) is recommended for optimal reporting.
     *
     * @param eventName {string} The event name
     * @param eventParams {object} (Optional) The event params
     * @return {Promise<any>} Returns a promise that resolves when the event is logged
     */
    /**
       * Logs an app event. The event can have up to 25 parameters.
       * Events with the same name must have the same parameters.
       * Up to 500 event names are supported.
       * Using predefined [FirebaseAnalytics.Event](https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Event.html) and/or [FirebaseAnalytics.Param](https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Param.html) is recommended for optimal reporting.
       *
       * @param eventName {string} The event name
       * @param eventParams {object} (Optional) The event params
       * @return {Promise<any>} Returns a promise that resolves when the event is logged
       */
    AnalyticsFirebase.prototype.logEvent = /**
       * Logs an app event. The event can have up to 25 parameters.
       * Events with the same name must have the same parameters.
       * Up to 500 event names are supported.
       * Using predefined [FirebaseAnalytics.Event](https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Event.html) and/or [FirebaseAnalytics.Param](https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Param.html) is recommended for optimal reporting.
       *
       * @param eventName {string} The event name
       * @param eventParams {object} (Optional) The event params
       * @return {Promise<any>} Returns a promise that resolves when the event is logged
       */
    function (eventName, eventParams) {
        return;
    };
    /**
     * Clears all analytics data for this app from the device and resets the app instance id
     * @return {Promise<any>} Returns a promise that resolves when the analytics data is cleared
     */
    /**
       * Clears all analytics data for this app from the device and resets the app instance id
       * @return {Promise<any>} Returns a promise that resolves when the analytics data is cleared
       */
    AnalyticsFirebase.prototype.resetAnalyticsData = /**
       * Clears all analytics data for this app from the device and resets the app instance id
       * @return {Promise<any>} Returns a promise that resolves when the analytics data is cleared
       */
    function () {
        return;
    };
    /**
     * Sets whether analytics collection is enabled for this app on this device. This setting is persisted across app sessions. By default it is enabled
     * @param screenName {boolean} The value of the collection
     * @return {Promise<any>} Returns a promise that resolves when the collection is enabled/disabled
     */
    /**
       * Sets whether analytics collection is enabled for this app on this device. This setting is persisted across app sessions. By default it is enabled
       * @param screenName {boolean} The value of the collection
       * @return {Promise<any>} Returns a promise that resolves when the collection is enabled/disabled
       */
    AnalyticsFirebase.prototype.setAnalyticsCollectionEnabled = /**
       * Sets whether analytics collection is enabled for this app on this device. This setting is persisted across app sessions. By default it is enabled
       * @param screenName {boolean} The value of the collection
       * @return {Promise<any>} Returns a promise that resolves when the collection is enabled/disabled
       */
    function (enabled) {
        return;
    };
    /**
     * Sets the current screen name, which specifies the current visual context in your app.
     * This helps identify the areas in your app where users spend their time and how they interact with your app
     * @param screenName {string} The screen name
     * @return {Promise<any>} Returns a promise that resolves when the current screen is setted
     */
    /**
       * Sets the current screen name, which specifies the current visual context in your app.
       * This helps identify the areas in your app where users spend their time and how they interact with your app
       * @param screenName {string} The screen name
       * @return {Promise<any>} Returns a promise that resolves when the current screen is setted
       */
    AnalyticsFirebase.prototype.setCurrentScreen = /**
       * Sets the current screen name, which specifies the current visual context in your app.
       * This helps identify the areas in your app where users spend their time and how they interact with your app
       * @param screenName {string} The screen name
       * @return {Promise<any>} Returns a promise that resolves when the current screen is setted
       */
    function (screenName) {
        return;
    };
    /**
     * Sets the minimum engagement time required before starting a session. The default value is 10000 (10 seconds)
     * @param screenName {number} The duration in milliseconds
     * @return {Promise<any>} Returns a promise that resolves when the minimum session duration is set
     */
    /**
       * Sets the minimum engagement time required before starting a session. The default value is 10000 (10 seconds)
       * @param screenName {number} The duration in milliseconds
       * @return {Promise<any>} Returns a promise that resolves when the minimum session duration is set
       */
    AnalyticsFirebase.prototype.setMinimumSessionDuration = /**
       * Sets the minimum engagement time required before starting a session. The default value is 10000 (10 seconds)
       * @param screenName {number} The duration in milliseconds
       * @return {Promise<any>} Returns a promise that resolves when the minimum session duration is set
       */
    function (milliseconds) {
        return;
    };
    /**
     * Sets the duration of inactivity that terminates the current session. The default value is 1800000 (30 minutes)
     * @param screenName {number} The duration in milliseconds
     * @return {Promise<any>} Returns a promise that resolves when the session timeout duration is set
     */
    /**
       * Sets the duration of inactivity that terminates the current session. The default value is 1800000 (30 minutes)
       * @param screenName {number} The duration in milliseconds
       * @return {Promise<any>} Returns a promise that resolves when the session timeout duration is set
       */
    AnalyticsFirebase.prototype.setSessionTimeoutDuration = /**
       * Sets the duration of inactivity that terminates the current session. The default value is 1800000 (30 minutes)
       * @param screenName {number} The duration in milliseconds
       * @return {Promise<any>} Returns a promise that resolves when the session timeout duration is set
       */
    function (milliseconds) {
        return;
    };
    /**
     * Sets the user ID property. This feature must be used in accordance with Google's Privacy Policy
     * @param userId {string} The user id
     * @return {Promise<any>} Returns a promise that resolves when the user id is setted
     */
    /**
       * Sets the user ID property. This feature must be used in accordance with Google's Privacy Policy
       * @param userId {string} The user id
       * @return {Promise<any>} Returns a promise that resolves when the user id is setted
       */
    AnalyticsFirebase.prototype.setUserId = /**
       * Sets the user ID property. This feature must be used in accordance with Google's Privacy Policy
       * @param userId {string} The user id
       * @return {Promise<any>} Returns a promise that resolves when the user id is setted
       */
    function (userId) {
        return;
    };
    /**
     * Sets a user property to a given value. Up to 25 user property names are supported. Once set, user property values persist throughout the app lifecycle and across sessions
     * @param userPropertyName {string} The user property name
     * @param userPropertyValue {string} The user property value
     * @return {Promise<any>} Returns a promise that resolves when the user property setted
     */
    /**
       * Sets a user property to a given value. Up to 25 user property names are supported. Once set, user property values persist throughout the app lifecycle and across sessions
       * @param userPropertyName {string} The user property name
       * @param userPropertyValue {string} The user property value
       * @return {Promise<any>} Returns a promise that resolves when the user property setted
       */
    AnalyticsFirebase.prototype.setUserProperty = /**
       * Sets a user property to a given value. Up to 25 user property names are supported. Once set, user property values persist throughout the app lifecycle and across sessions
       * @param userPropertyName {string} The user property name
       * @param userPropertyValue {string} The user property value
       * @return {Promise<any>} Returns a promise that resolves when the user property setted
       */
    function (userPropertyName, userPropertyValue) {
        return;
    };
    AnalyticsFirebase.decorators = [
        { type: Injectable },
    ];
    __decorate([
        CordovaProperty,
        __metadata("design:type", Object)
    ], AnalyticsFirebase.prototype, "DEFAULT_EVENTS", void 0);
    __decorate([
        CordovaProperty,
        __metadata("design:type", Object)
    ], AnalyticsFirebase.prototype, "DEFAULT_PARAMS", void 0);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], AnalyticsFirebase.prototype, "logEvent", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], AnalyticsFirebase.prototype, "resetAnalyticsData", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean]),
        __metadata("design:returntype", Promise)
    ], AnalyticsFirebase.prototype, "setAnalyticsCollectionEnabled", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], AnalyticsFirebase.prototype, "setCurrentScreen", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", Promise)
    ], AnalyticsFirebase.prototype, "setMinimumSessionDuration", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", Promise)
    ], AnalyticsFirebase.prototype, "setSessionTimeoutDuration", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], AnalyticsFirebase.prototype, "setUserId", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String]),
        __metadata("design:returntype", Promise)
    ], AnalyticsFirebase.prototype, "setUserProperty", null);
    /**
     * @name Analytics Firebase
     * @description
     * Google Analytics Firebase plugin for Ionic Native apps.
     *
     * @usage
     * ```typescript
     * import { AnalyticsFirebase } from '@ionic-native/analytics-firebase';
     *
     *
     * constructor(private analyticsFirebase: AnalyticsFirebase) { }
     *
     * // Track an event with default events and params
     * const eventParams = {};
     * eventParams[this.analyticsFirebase.DEFAULT_PARAMS.LEVEL] = 29;
     * this.analyticsFirebase.logEvent(this.analyticsFirebase.DEFAULT_EVENTS.LEVEL_UP, eventParams)
     *   .then(() => console.log('Event successfully tracked'))
     *   .catch(err => console.log('Error tracking event:', err));
     *
     * // Track an event with custom events and params
     * const eventParams = {};
     * eventParams['my-prop'] = 29;
     * this.analyticsFirebase.logEvent('my-event', eventParams)
     *   .then(() => console.log('Event successfully tracked'))
     *   .catch(err => console.log('Error tracking event:', err));
     *
     *
     * // Reset analytics data
     * this.analyticsFirebase.resetAnalyticsData()
     *   .then(() => console.log('Analytics data have been reset'))
     *   .catch(err => console.log('Error resetting analytics data:', err));
     *
     *
     * // Track a screen view
     * this.analyticsFirebase.setCurrentScreen('Home')
     *   .then(() => console.log('View successfully tracked'))
     *   .catch(err => console.log('Error tracking view:', err));
     *
     *
     * // Set user id
     * this.analyticsFirebase.setUserId('USER-ID')
     *   .then(() => console.log('User id successfully set'))
     *   .catch(err => console.log('Error setting user id:', err));
     *
     *
     * // Set user property from default properties
     * this.analyticsFirebase.setUserProperty('KEY', 'VALUE')
     *   .then(() => console.log('User property successfully set'))
     *   .catch(err => console.log('Error setting user property:', err));
     *
     * ```
     */
    AnalyticsFirebase = __decorate([
        Plugin({
            pluginName: 'AnalyticsFirebase',
            plugin: 'cordova-plugin-analytics',
            pluginRef: 'analytics',
            repo: 'https://github.com/appfeel/analytics-google',
            platforms: ['Android', 'iOS']
        })
    ], AnalyticsFirebase);
    return AnalyticsFirebase;
}(IonicNativePlugin));
export { AnalyticsFirebase };
//# sourceMappingURL=index.js.map